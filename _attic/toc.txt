--- Fourth Recording ---

http_test
    Use httptest.NewRequest and http.NewRecorder to test your HTTP handlers.

num_chars
    Use utf8.RuneCountInString to count number of runes (code points/characters) in a string.

breakpoint
    Use runtime.Breakpoint for "manual" breakpoints.

embed_fs
    You can embed a directory of assets in your application.

full_slice
    Use full slice expression to prevent bugs.

sha1
    Crypto hashes implement io.Writer.

sql_named
    Use sql.Named to pass parameters by name to SQL queries.

http_const
    The net/http package defines several useful constants.

caller
    Use runtime.Caller to get file/line information.

zero
    Define a "zero" function to return zero values from generics functions.
    
gz
    Use gzip to add compression to HTTP handlers.

--- Third Recording ---

config_dir
    Use os.UserConfigDir to get the default configuration directory.

equal_time
    Use Time.Equal (not ==) to compare times.

greedy
    Use `re?` or `(?U:re)` to make regular expressions non-greedy.

race
    Use "go test -race" to detect race conditions.

rate
    Use golang.org/x/time/rate for rate limiting.

rename_import
    You can rename imports to avoid name collision.

request_ctx
    Use http.Request.Clone to add values to request Context.

search
    Use slices.BinarySearch or sort.Search and friends to do a binary search.

sigpipe
    Get rid of "signal: broken pipe" errors by catching SIGPIPE.

skip
    Use t.Skip to skip tests.


--- Second Recording ---

client
    Replace http.Client.Transport with your own http.RoundTripper to mock errors.

discard
    Use ioutil.Discard to discard output.

for_range
    Use empty "for range items" to run len(items) iterations.

fmt_num
    Use x/text to format numbers.

json_stream
    The encoding/json encoder/decoder can stream output/input:

limit
    http.MaxBytesReader to avoid reading too much into memory.

nfc
    Use golang.org/x/text/unicode/norm to normalize Unicode strings.

trimpath
    Use the -trimpath build flag to get relative path stack traces.

tz
    The "time" package has built-in support for time zones.

word_freq
    map will return the zero value for missing keys, useful for counting.

--- First Recording ---

cleanup
    Use t.Cleanup to close resources after tests.
label
    Use labels to break from nested loops and switch cases.
test_main
    Use TestMain for package level setup/teardown (fixtures).
pipe
    You can pipe output from one exec.Command to the other.
expandenv
    Use os.ExpandEnv to expand environment variables in a string.
fold
    Use strings.EqualFold for Unicode aware case insensitive comparison.
is_alive
    Send signal 0 to check if a process is alive.
net_ip
    Use the "net" package to check if IP is in a network.
regexp_fn
    regexp can use functions for substitution.
io_multi
    Use io.MultiWriter to write to several destinations.
http_flusher
    Use http.Flusher to stream data (chunked transfer encoding).
fmt_loc
    fmt.Printf can access arguments by location.
stringer
    Use golang.org/x/tools/cmd/stringer to generate fmt.Stringer for your types.
raw_string
    Use raw strings to escape \ or create multiline strings.
server
    Use your own HTTP router and server to avoid third party packages injecting handlers.
compound_key
    You can use struct as a compound key in maps.
make
    "make" has a 3 parameter for initial capacity to avoid redundant memory allocations.
fmt_star
    Use * to dynamically pass flags to fmt verbs.
json_binary
    encoding/json will marshal []byte in base64
